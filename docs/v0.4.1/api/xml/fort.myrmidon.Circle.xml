<?xml version='1.0' encoding='utf-8'?>
<class id="fort::myrmidon::Circle" interface="true" name="Circle" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>A circle</brief>
  <base access="public">
    <type name="Shape" ref="fort::myrmidon::Shape#fort::myrmidon::Shape" />
    <brief>Base class for  geometric Shape</brief>
  </base>
  <typedef id="fort::myrmidon::Circle::PPtr" name="PPtr">
    <brief>Opaque pointer to implementation</brief>
    <type class="template" name="std::shared_ptr">
      <template-arguments>
        <type name="priv::Circle" ref="fort::myrmidon::priv::Circle#fort::myrmidon::priv::Circle" />
      </template-arguments>
    </type>
  </typedef>
  <constructor abstract="yes" id="fort::myrmidon::Circle::Circle" name="Circle">
    <brief>public constructor</brief>
    <doc>R version:
```R
c &lt;- fmCircleCreate(c(x,y),r)
```</doc>
    <argument id="fort::myrmidon::Circle::Circle::center" name="center">
      <doc>the center of the circle</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </argument>
    <argument id="fort::myrmidon::Circle::Circle::radius" name="radius">
      <doc>the radius of the circle</doc>
      <type builtin="yes" name="double" />
    </argument>
  </constructor>
  <constructor abstract="yes" id="fort::myrmidon::Circle::Circle" name="Circle">
    <brief>Private implementation constructor.</brief>
    <argument id="fort::myrmidon::Circle::Circle::pCircle" name="pCircle">
      <doc>opaque pointer to implementation</doc>
      <type name="PPtr" qualifier=" const &amp;" ref="fort::myrmidon::Circle#fort::myrmidon::Circle::PPtr" />
    </argument>
  </constructor>
  <destructor abstract="yes" id="fort::myrmidon::Circle::~Circle" name="~Circle" virtual="yes">
    <brief>virtual destructor</brief>
  </destructor>
  <method abstract="yes" id="fort::myrmidon::Circle::Center" name="Center">
    <brief>Gets the center of the circle</brief>
    <doc>R version:
```R
c$center()
```

</doc>
    <return>
      <doc>a reference to the center of the circle</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::Circle::Radius" name="Radius">
    <brief>Gets the radius of the circle</brief>
    <doc>R version:
```R
c$radius()
```

</doc>
    <return>
      <doc>the circle's radius</doc>
      <type builtin="yes" name="double" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::Circle::SetCenter" name="SetCenter">
    <brief>Sets the center of the circle</brief>
    <doc>R version:
```R
c$setCenter(c(x,y))
```</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::Circle::SetCenter::center" name="center">
      <doc>the center of the circle</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::Circle::SetRadius" name="SetRadius">
    <brief>Sets the radius of the circle</brief>
    <doc>R version:
```R
c$setRadius(radius)
```</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::Circle::SetRadius::radius" name="radius">
      <doc>the radius of the circle</doc>
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::Circle::ToPrivate" name="ToPrivate">
    <brief>Downcast to private implementation.</brief>
    <return>
      <doc>the private implementation</doc>
      <type name="PPtr" qualifier=" const &amp;" ref="fort::myrmidon::Circle#fort::myrmidon::Circle::PPtr" />
    </return>
  </method>
</class>
