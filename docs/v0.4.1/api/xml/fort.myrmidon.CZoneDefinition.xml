<?xml version='1.0' encoding='utf-8'?>
<class id="fort::myrmidon::CZoneDefinition" interface="true" name="CZoneDefinition" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>const version of ZoneDefinition</brief>
  <doc>Simply a strip down copy of <ref ref="fort::myrmidon::ZoneDefinition#fort::myrmidon::ZoneDefinition">fort::myrmidon::ZoneDefinition</ref> . Its an helper class
to support const correctness of object and for language binding
that does not enforce constness, such as R.</doc>
  <typedef id="fort::myrmidon::CZoneDefinition::ConstPPtr" name="ConstPPtr">
    <brief>Opaque implementation pointer</brief>
    <type class="template" name="std::shared_ptr">
      <template-arguments>
        <type name="priv::ZoneDefinition" qualifier=" const" ref="fort::myrmidon::priv::ZoneDefinition#fort::myrmidon::priv::ZoneDefinition" />
      </template-arguments>
    </type>
  </typedef>
  <constructor abstract="yes" id="fort::myrmidon::CZoneDefinition::CZoneDefinition" name="CZoneDefinition">
    <brief>Private implementation constructor</brief>
    <doc>User cannot build Defoninition directly. They must be build and
accessed from <ref ref="fort::myrmidon::Zone#fort::myrmidon::Zone">fort::myrmidon::Zone</ref>.</doc>
    <argument id="fort::myrmidon::CZoneDefinition::CZoneDefinition::pDefinition" name="pDefinition">
      <doc>opaque pointer to implementation</doc>
      <type name="ConstPPtr" qualifier=" const &amp;" ref="fort::myrmidon::CZoneDefinition#fort::myrmidon::CZoneDefinition::ConstPPtr" />
    </argument>
  </constructor>
  <method abstract="yes" id="fort::myrmidon::CZoneDefinition::End" name="End">
    <brief>Gets the ending valid time of the Definition</brief>
    <doc>R version:
```R
zd$end()
```

</doc>
    <return>
      <doc>a <ref ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr">fort::myrmidon::Time::ConstPtr</ref> before which the Definition is
valid. nullptr means +∞.</doc>
      <type name="Time::ConstPtr" qualifier=" const &amp;" ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::CZoneDefinition::Geometry" name="Geometry">
    <brief>Gets the geometry of this definition</brief>
    <doc>R version:
```R
zd$geometry()
```

</doc>
    <return>
      <doc>a union of <ref ref="fort::myrmidon::Shape#fort::myrmidon::Shape">fort::myrmidon::Shape</ref> defining the geometry</doc>
      <type name="Shape::ConstList" ref="fort::myrmidon::Shape#fort::myrmidon::Shape::ConstList" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::CZoneDefinition::Start" name="Start">
    <brief>Gets the first valid time of the Definition</brief>
    <doc>R version:
```R
zd$start()
```

</doc>
    <return>
      <doc>a <ref ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr">fort::myrmidon::Time::ConstPtr</ref> for the first valid
time. nullptr means -∞.</doc>
      <type name="Time::ConstPtr" qualifier=" const &amp;" ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr" />
    </return>
  </method>
</class>
