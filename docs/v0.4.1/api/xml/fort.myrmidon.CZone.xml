<?xml version='1.0' encoding='utf-8'?>
<class id="fort::myrmidon::CZone" interface="true" name="CZone" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>const version of Zone</brief>
  <doc>Simply a strip down copy of <ref ref="fort::myrmidon::Zone#fort::myrmidon::Zone">fort::myrmidon::Zone</ref> . Its an helper class
to support const correctness of object and for language binding
that does not enforce constness, such as R.</doc>
  <typedef id="fort::myrmidon::CZone::ConstPPtr" name="ConstPPtr">
    <brief>Opaque pointer for implementation</brief>
    <type class="template" name="std::shared_ptr">
      <template-arguments>
        <type name="priv::Zone" qualifier=" const" ref="fort::myrmidon::priv::Zone#fort::myrmidon::priv::Zone" />
      </template-arguments>
    </type>
  </typedef>
  <constructor abstract="yes" id="fort::myrmidon::CZone::CZone" name="CZone">
    <brief>Private implementation constructor</brief>
    <doc>User cannot build Zone directly. They must be build and
accessed from <ref ref="fort::myrmidon::Space#fort::myrmidon::Space">fort::myrmidon::Space</ref>.</doc>
    <argument id="fort::myrmidon::CZone::CZone::pZone" name="pZone">
      <doc>opaque pointer to implementation</doc>
      <type name="ConstPPtr" qualifier=" const &amp;" ref="fort::myrmidon::CZone#fort::myrmidon::CZone::ConstPPtr" />
    </argument>
  </constructor>
  <method abstract="yes" id="fort::myrmidon::CZone::CDefinitions" name="CDefinitions">
    <brief>const access to the ZoneDefinition</brief>
    <doc>R version:
```R
z$cDefinitions()
```

</doc>
    <return>
      <doc>a <ref ref="fort::myrmidon::ZoneDefinition#fort::myrmidon::ZoneDefinition::ConstList">fort::myrmidon::ZoneDefinition::ConstList</ref> of <ref ref="fort::myrmidon::ZoneDefinition#fort::myrmidon::ZoneDefinition">fort::myrmidon::ZoneDefinition</ref> for this Zone</doc>
      <type name="ZoneDefinition::ConstList" ref="fort::myrmidon::ZoneDefinition#fort::myrmidon::ZoneDefinition::ConstList" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::CZone::Name" name="Name">
    <brief>Gets the Zone name</brief>
    <doc>R version:
```R
z$name()
```

</doc>
    <return>
      <doc>the Zone name</doc>
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::CZone::ZoneID" name="ZoneID">
    <brief>Gets the Zone ID</brief>
    <doc>Gets the Zone <ref ref="fort::myrmidon::CZone#fort::myrmidon::CZone::ZoneID">ZoneID</ref>. <ref ref="fort::myrmidon::CZone#fort::myrmidon::CZone::ZoneID">ZoneID</ref> are unique within a <ref ref="fort::myrmidon::Space#fort::myrmidon::Space">fort::myrmidon::Space</ref>, but two
Zone in different <ref ref="fort::myrmidon::Space#fort::myrmidon::Space">fort::myrmidon::Space</ref> can have the same <ref ref="fort::myrmidon::CZone#fort::myrmidon::CZone::ZoneID">ZoneID</ref>.

R version:
```R
z$zoneID()
```

</doc>
    <return>
      <doc>the Zone <ref ref="fort::myrmidon::CZone#fort::myrmidon::CZone::ZoneID">ZoneID</ref></doc>
      <type name="ZoneID" ref="fort::myrmidon#fort::myrmidon::ZoneID" />
    </return>
  </method>
</class>
