<?xml version='1.0' encoding='utf-8'?>
<class id="fort::myrmidon::Zone::Definition" interface="true" name="Definition" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Defines the geometry of a <ref ref="fort::myrmidon::Zone#fort::myrmidon::Zone::Zone">fort::myrmidon::Zone::Zone</ref> in <ref ref="fort::myrmidon::Time#fort::myrmidon::Time">fort::myrmidon::Time</ref>
  </brief>
  <doc>Definition sets for a time range [<ref ref="fort::myrmidon::Zone::Definition#fort::myrmidon::Zone::Definition::Start">Start</ref>,<ref ref="fort::myrmidon::Zone::Definition#fort::myrmidon::Zone::Definition::End">End</ref>[ a <ref ref="fort::myrmidon::Zone::Definition#fort::myrmidon::Zone::Definition::Geometry">Geometry</ref>
for a <ref ref="fort::myrmidon::Zone#fort::myrmidon::Zone::Zone">fort::myrmidon::Zone::Zone</ref>. nullptr for <ref ref="fort::myrmidon::Zone::Definition#fort::myrmidon::Zone::Definition::Start">Start</ref> or <ref ref="fort::myrmidon::Zone::Definition#fort::myrmidon::Zone::Definition::End">End</ref> represents -/+∞.</doc>
  <typedef id="fort::myrmidon::Zone::Definition::ConstList" name="ConstList">
    <brief>A const list of Definition</brief>
    <type name="std::vector&lt;std::shared_ptr&lt;const fort::myrmidon::Zone::Definition&gt;, std::allocator&lt;std::shared_ptr&lt;const fort::myrmidon::Zone::Definition&gt; &gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::Zone::Definition::ConstPtr" name="ConstPtr">
    <brief>A const pointer to the Definition</brief>
    <type name="std::shared_ptr&lt;const fort::myrmidon::Zone::Definition&gt;" />
  </typedef>
  <typedef id="fort::myrmidon::Zone::Definition::List" name="List">
    <brief>A list of Definition</brief>
    <type name="std::vector&lt;std::shared_ptr&lt;fort::myrmidon::Zone::Definition&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::Zone::Definition&gt; &gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::Zone::Definition::PPtr" name="PPtr">
    <brief>Opaque implementation pointer</brief>
    <type name="std::shared_ptr&lt;fort::myrmidon::priv::ZoneDefinition&gt;" />
  </typedef>
  <typedef id="fort::myrmidon::Zone::Definition::Ptr" name="Ptr">
    <brief>A Pointer to the Definition</brief>
    <type name="std::shared_ptr&lt;fort::myrmidon::Zone::Definition&gt;" />
  </typedef>
  <constructor abstract="yes" id="fort::myrmidon::Zone::Definition::Definition" name="Definition">
    <brief>Private implementation constructor</brief>
    <doc>User cannot build Defoninition directly. They must be build and
accessed from <ref ref="fort::myrmidon::Zone#fort::myrmidon::Zone::Zone">fort::myrmidon::Zone::Zone</ref>.</doc>
    <argument id="fort::myrmidon::Zone::Definition::Definition::pDefinition" name="pDefinition">
      <doc>opaque pointer to implementation</doc>
      <type name="PPtr" qualifier=" const &amp;" ref="fort::myrmidon::Zone::Definition#fort::myrmidon::Zone::Definition::PPtr" />
    </argument>
  </constructor>
  <method abstract="yes" id="fort::myrmidon::Zone::Definition::End" name="End">
    <brief>Gets the ending valid time of the Definition</brief>
    <return>
      <doc>a <ref ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr">fort::myrmidon::Time::ConstPtr</ref> before which the Definition is
valid. nullptr means +∞.</doc>
      <type name="Time::ConstPtr" qualifier=" const &amp;" ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::Zone::Definition::Geometry" name="Geometry">
    <brief>Gets the geometry of this definition</brief>
    <return>
      <doc>a union of <ref ref="fort::myrmidon::Shape#fort::myrmidon::Shape">fort::myrmidon::Shape</ref> defining the geometry</doc>
      <type name="Shape::ConstList" ref="fort::myrmidon::Shape#fort::myrmidon::Shape::ConstList" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::Zone::Definition::SetEnd" name="SetEnd">
    <brief>Sets the last valid time of the Definition</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::Zone::Definition::SetEnd::end" name="end">
      <doc>the <ref ref="fort::myrmidon::Time#fort::myrmidon::Time">fort::myrmidon::Time</ref> before which the Definition is
valid. nullptr means -∞</doc>
      <type name="Time::ConstPtr" qualifier=" const &amp;" ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::Zone::Definition::SetGeometry" name="SetGeometry">
    <brief>Sets the geometry of this definition</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::Zone::Definition::SetGeometry::shapes" name="shapes">
      <doc>a union of <ref ref="fort::myrmidon::Shape#fort::myrmidon::Shape">fort::myrmidon::Shape</ref> defining the <ref ref="fort::myrmidon::Zone#fort::myrmidon::Zone::Zone">fort::myrmidon::Zone::Zone</ref> geometry.</doc>
      <type name="Shape::ConstList" qualifier=" const &amp;" ref="fort::myrmidon::Shape#fort::myrmidon::Shape::ConstList" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::Zone::Definition::SetStart" name="SetStart">
    <brief>Sets the first valid time of the Definition</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::Zone::Definition::SetStart::start" name="start">
      <doc>the first valid <ref ref="fort::myrmidon::Time#fort::myrmidon::Time">fort::myrmidon::Time</ref> for the Definition. nullptr
means -∞</doc>
      <type name="Time::ConstPtr" qualifier=" const &amp;" ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::Zone::Definition::Start" name="Start">
    <brief>Gets the first valid time of the Definition</brief>
    <return>
      <doc>a <ref ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr">fort::myrmidon::Time::ConstPtr</ref> for the first valid
time. nullptr means -∞.</doc>
      <type name="Time::ConstPtr" qualifier=" const &amp;" ref="fort::myrmidon::Time#fort::myrmidon::Time::ConstPtr" />
    </return>
  </method>
</class>
